// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: company.proto

/*
	Package company is a generated protocol buffer package.

	It is generated from these files:
		company.proto

	It has these top-level messages:
		Company
		CompanyList
		CompanyListRequest
		CreateCompanyRequest
		GetCompanyRequest
		Team
		TeamList
		TeamListRequest
		CreateTeamRequest
		GetTeamRequest
		Job
		JobList
		JobListRequest
		CreateJobRequest
		GetJobRequest
		Shift
		ShiftList
		ShiftListRequest
		WorkerShiftListRequest
		BulkPublishShiftsRequest
		CreateShiftRequest
		GetShiftRequest
		DirectoryEntry
		NewDirectoryEntry
		DirectoryEntryRequest
		DirectoryList
		DirectoryListRequest
		AdminListRequest
		Admins
		AdminOfRequest
		AdminOfList
		WorkerListRequest
		Workers
		Worker
		WorkerOfRequest
		WorkerOfList
		Association
		AssociationList
		TimeZoneList
		TimeZoneListRequest
		ScheduledPerWeek
		GrowthGraphResponse
		GrowthGraphRequest
*/
package company

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Company struct {
	Uuid                 string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived             bool   `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	DefaultTimezone      string `protobuf:"bytes,4,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty" db:"default_timezone"`
	DefaultDayWeekStarts string `protobuf:"bytes,5,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty" db:"default_day_week_starts"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{0} }

func (m *Company) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Company) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *Company) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

type CompanyList struct {
	Companies []Company `protobuf:"bytes,1,rep,name=companies" json:"companies"`
	Limit     int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *CompanyList) Reset()                    { *m = CompanyList{} }
func (m *CompanyList) String() string            { return proto.CompactTextString(m) }
func (*CompanyList) ProtoMessage()               {}
func (*CompanyList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{1} }

func (m *CompanyList) GetCompanies() []Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *CompanyList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CompanyList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type CompanyListRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *CompanyListRequest) Reset()                    { *m = CompanyListRequest{} }
func (m *CompanyListRequest) String() string            { return proto.CompactTextString(m) }
func (*CompanyListRequest) ProtoMessage()               {}
func (*CompanyListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{2} }

func (m *CompanyListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CompanyListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CreateCompanyRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,2,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,3,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty"`
}

func (m *CreateCompanyRequest) Reset()                    { *m = CreateCompanyRequest{} }
func (m *CreateCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCompanyRequest) ProtoMessage()               {}
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{3} }

func (m *CreateCompanyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

type GetCompanyRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetCompanyRequest) Reset()                    { *m = GetCompanyRequest{} }
func (m *GetCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCompanyRequest) ProtoMessage()               {}
func (*GetCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{4} }

func (m *GetCompanyRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Team struct {
	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid   string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"company_uuid"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived      bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	Timezone      string `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty" db:"timezone"`
	DayWeekStarts string `protobuf:"bytes,6,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty" db:"day_week_starts"`
	Color         string `protobuf:"bytes,7,opt,name=color,proto3" json:"color,omitempty" db:"color"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{5} }

func (m *Team) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Team) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Team) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Team) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *Team) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type TeamList struct {
	Teams []Team `protobuf:"bytes,1,rep,name=teams" json:"teams"`
}

func (m *TeamList) Reset()                    { *m = TeamList{} }
func (m *TeamList) String() string            { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()               {}
func (*TeamList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{6} }

func (m *TeamList) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type TeamListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *TeamListRequest) Reset()                    { *m = TeamListRequest{} }
func (m *TeamListRequest) String() string            { return proto.CompactTextString(m) }
func (*TeamListRequest) ProtoMessage()               {}
func (*TeamListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{7} }

func (m *TeamListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type CreateTeamRequest struct {
	CompanyUuid   string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Timezone      string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,4,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *CreateTeamRequest) Reset()                    { *m = CreateTeamRequest{} }
func (m *CreateTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamRequest) ProtoMessage()               {}
func (*CreateTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{8} }

func (m *CreateTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateTeamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTeamRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CreateTeamRequest) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *CreateTeamRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetTeamRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetTeamRequest) Reset()                    { *m = GetTeamRequest{} }
func (m *GetTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamRequest) ProtoMessage()               {}
func (*GetTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{9} }

func (m *GetTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetTeamRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Job struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"-"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty" db:"team_uuid"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived    bool   `protobuf:"varint,5,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	Color       string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty" db:"color"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{10} }

func (m *Job) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Job) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Job) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Job) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type JobList struct {
	Jobs []Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{11} }

func (m *JobList) GetJobs() []Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *JobListRequest) Reset()                    { *m = JobListRequest{} }
func (m *JobListRequest) String() string            { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()               {}
func (*JobListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{12} }

func (m *JobListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *JobListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type CreateJobRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{13} }

func (m *CreateJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateJobRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateJobRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetJobRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *GetJobRequest) Reset()                    { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()               {}
func (*GetJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{14} }

func (m *GetJobRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type Shift struct {
	Uuid        string    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid string    `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"-"`
	TeamUuid    string    `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty" db:	eam_uuid"`
	Start       time.Time `protobuf:"bytes,4,opt,name=start,stdtime" json:"start" db:"start"`
	Stop        time.Time `protobuf:"bytes,5,opt,name=stop,stdtime" json:"stop" db:"stop"`
	UserUuid    string    `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty" db:"user_uuid"`
	JobUuid     string    `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty" db:"job_uuid"`
	Published   string    `protobuf:"bytes,8,opt,name=published,proto3" json:"published,omitempty" db:"published"`
}

func (m *Shift) Reset()                    { *m = Shift{} }
func (m *Shift) String() string            { return proto.CompactTextString(m) }
func (*Shift) ProtoMessage()               {}
func (*Shift) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{15} }

func (m *Shift) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Shift) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Shift) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Shift) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Shift) GetStop() time.Time {
	if m != nil {
		return m.Stop
	}
	return time.Time{}
}

func (m *Shift) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *Shift) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *Shift) GetPublished() string {
	if m != nil {
		return m.Published
	}
	return ""
}

type ShiftList struct {
	Shifts           []Shift   `protobuf:"bytes,1,rep,name=shifts" json:"shifts"`
	ShiftStartAfter  time.Time `protobuf:"bytes,2,opt,name=shift_start_after,json=shiftStartAfter,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,3,opt,name=shift_start_before,json=shiftStartBefore,stdtime" json:"shift_start_before"`
}

func (m *ShiftList) Reset()                    { *m = ShiftList{} }
func (m *ShiftList) String() string            { return proto.CompactTextString(m) }
func (*ShiftList) ProtoMessage()               {}
func (*ShiftList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{16} }

func (m *ShiftList) GetShifts() []Shift {
	if m != nil {
		return m.Shifts
	}
	return nil
}

func (m *ShiftList) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *ShiftList) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

type ShiftListRequest struct {
	CompanyUuid      string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  string `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore string `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
}

func (m *ShiftListRequest) Reset()                    { *m = ShiftListRequest{} }
func (m *ShiftListRequest) String() string            { return proto.CompactTextString(m) }
func (*ShiftListRequest) ProtoMessage()               {}
func (*ShiftListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{17} }

func (m *ShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *ShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *ShiftListRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *ShiftListRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartAfter() string {
	if m != nil {
		return m.ShiftStartAfter
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartBefore() string {
	if m != nil {
		return m.ShiftStartBefore
	}
	return ""
}

type WorkerShiftListRequest struct {
	CompanyUuid      string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	WorkerUuid       string    `protobuf:"bytes,3,opt,name=worker_uuid,json=workerUuid,proto3" json:"worker_uuid,omitempty"`
	ShiftStartAfter  time.Time `protobuf:"bytes,4,opt,name=shift_start_after,json=shiftStartAfter,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,5,opt,name=shift_start_before,json=shiftStartBefore,stdtime" json:"shift_start_before"`
}

func (m *WorkerShiftListRequest) Reset()                    { *m = WorkerShiftListRequest{} }
func (m *WorkerShiftListRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerShiftListRequest) ProtoMessage()               {}
func (*WorkerShiftListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{18} }

func (m *WorkerShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetWorkerUuid() string {
	if m != nil {
		return m.WorkerUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *WorkerShiftListRequest) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

type BulkPublishShiftsRequest struct {
	CompanyUuid      string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string    `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string    `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  time.Time `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,stdtime" json:"shift_start_before"`
	Published        bool      `protobuf:"varint,7,opt,name=published,proto3" json:"published,omitempty"`
}

func (m *BulkPublishShiftsRequest) Reset()                    { *m = BulkPublishShiftsRequest{} }
func (m *BulkPublishShiftsRequest) String() string            { return proto.CompactTextString(m) }
func (*BulkPublishShiftsRequest) ProtoMessage()               {}
func (*BulkPublishShiftsRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{19} }

func (m *BulkPublishShiftsRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *BulkPublishShiftsRequest) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

func (m *BulkPublishShiftsRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type CreateShiftRequest struct {
	CompanyUuid string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Start       time.Time `protobuf:"bytes,4,opt,name=start,stdtime" json:"start"`
	Stop        time.Time `protobuf:"bytes,5,opt,name=stop,stdtime" json:"stop"`
	UserUuid    string    `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid     string    `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	Published   bool      `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty"`
}

func (m *CreateShiftRequest) Reset()                    { *m = CreateShiftRequest{} }
func (m *CreateShiftRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateShiftRequest) ProtoMessage()               {}
func (*CreateShiftRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{20} }

func (m *CreateShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *CreateShiftRequest) GetStop() time.Time {
	if m != nil {
		return m.Stop
	}
	return time.Time{}
}

func (m *CreateShiftRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type GetShiftRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *GetShiftRequest) Reset()                    { *m = GetShiftRequest{} }
func (m *GetShiftRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShiftRequest) ProtoMessage()               {}
func (*GetShiftRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{21} }

func (m *GetShiftRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *GetShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

// directory
type DirectoryEntry struct {
	UserUuid    string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	InternalId  string `protobuf:"bytes,2,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	// coming from account
	Name               string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ConfirmedAndActive bool   `protobuf:"varint,7,opt,name=confirmed_and_active,json=confirmedAndActive,proto3" json:"confirmed_and_active,omitempty"`
	Phonenumber        string `protobuf:"bytes,8,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	PhotoUrl           string `protobuf:"bytes,9,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
}

func (m *DirectoryEntry) Reset()                    { *m = DirectoryEntry{} }
func (m *DirectoryEntry) String() string            { return proto.CompactTextString(m) }
func (*DirectoryEntry) ProtoMessage()               {}
func (*DirectoryEntry) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{22} }

func (m *DirectoryEntry) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *DirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *DirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DirectoryEntry) GetConfirmedAndActive() bool {
	if m != nil {
		return m.ConfirmedAndActive
	}
	return false
}

func (m *DirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *DirectoryEntry) GetPhotoUrl() string {
	if m != nil {
		return m.PhotoUrl
	}
	return ""
}

type NewDirectoryEntry struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phonenumber string `protobuf:"bytes,4,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	InternalId  string `protobuf:"bytes,5,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
}

func (m *NewDirectoryEntry) Reset()                    { *m = NewDirectoryEntry{} }
func (m *NewDirectoryEntry) String() string            { return proto.CompactTextString(m) }
func (*NewDirectoryEntry) ProtoMessage()               {}
func (*NewDirectoryEntry) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{23} }

func (m *NewDirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *NewDirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewDirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewDirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *NewDirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

type DirectoryEntryRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *DirectoryEntryRequest) Reset()                    { *m = DirectoryEntryRequest{} }
func (m *DirectoryEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectoryEntryRequest) ProtoMessage()               {}
func (*DirectoryEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{24} }

func (m *DirectoryEntryRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntryRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type DirectoryList struct {
	Accounts []DirectoryEntry `protobuf:"bytes,1,rep,name=accounts" json:"accounts"`
	Limit    int32            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32            `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *DirectoryList) Reset()                    { *m = DirectoryList{} }
func (m *DirectoryList) String() string            { return proto.CompactTextString(m) }
func (*DirectoryList) ProtoMessage()               {}
func (*DirectoryList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{25} }

func (m *DirectoryList) GetAccounts() []DirectoryEntry {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *DirectoryList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DirectoryListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Limit       int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *DirectoryListRequest) Reset()                    { *m = DirectoryListRequest{} }
func (m *DirectoryListRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectoryListRequest) ProtoMessage()               {}
func (*DirectoryListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{26} }

func (m *DirectoryListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// admins
type AdminListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *AdminListRequest) Reset()                    { *m = AdminListRequest{} }
func (m *AdminListRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminListRequest) ProtoMessage()               {}
func (*AdminListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{27} }

func (m *AdminListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type Admins struct {
	CompanyUuid string           `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Admins      []DirectoryEntry `protobuf:"bytes,2,rep,name=admins" json:"admins"`
}

func (m *Admins) Reset()                    { *m = Admins{} }
func (m *Admins) String() string            { return proto.CompactTextString(m) }
func (*Admins) ProtoMessage()               {}
func (*Admins) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{28} }

func (m *Admins) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Admins) GetAdmins() []DirectoryEntry {
	if m != nil {
		return m.Admins
	}
	return nil
}

type AdminOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *AdminOfRequest) Reset()                    { *m = AdminOfRequest{} }
func (m *AdminOfRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminOfRequest) ProtoMessage()               {}
func (*AdminOfRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{29} }

func (m *AdminOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type AdminOfList struct {
	UserUuid  string    `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Companies []Company `protobuf:"bytes,2,rep,name=companies" json:"companies"`
}

func (m *AdminOfList) Reset()                    { *m = AdminOfList{} }
func (m *AdminOfList) String() string            { return proto.CompactTextString(m) }
func (*AdminOfList) ProtoMessage()               {}
func (*AdminOfList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{30} }

func (m *AdminOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *AdminOfList) GetCompanies() []Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

// workers
type WorkerListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *WorkerListRequest) Reset()                    { *m = WorkerListRequest{} }
func (m *WorkerListRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerListRequest) ProtoMessage()               {}
func (*WorkerListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{31} }

func (m *WorkerListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type Workers struct {
	CompanyUuid string           `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string           `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Workers     []DirectoryEntry `protobuf:"bytes,3,rep,name=workers" json:"workers"`
}

func (m *Workers) Reset()                    { *m = Workers{} }
func (m *Workers) String() string            { return proto.CompactTextString(m) }
func (*Workers) ProtoMessage()               {}
func (*Workers) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{32} }

func (m *Workers) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Workers) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Workers) GetWorkers() []DirectoryEntry {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Worker struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{33} }

func (m *Worker) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Worker) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Worker) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type WorkerOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *WorkerOfRequest) Reset()                    { *m = WorkerOfRequest{} }
func (m *WorkerOfRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerOfRequest) ProtoMessage()               {}
func (*WorkerOfRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{34} }

func (m *WorkerOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type WorkerOfList struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Teams    []Team `protobuf:"bytes,2,rep,name=teams" json:"teams"`
}

func (m *WorkerOfList) Reset()                    { *m = WorkerOfList{} }
func (m *WorkerOfList) String() string            { return proto.CompactTextString(m) }
func (*WorkerOfList) ProtoMessage()               {}
func (*WorkerOfList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{35} }

func (m *WorkerOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *WorkerOfList) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type Association struct {
	Account DirectoryEntry `protobuf:"bytes,1,opt,name=account" json:"account"`
	Teams   []Team         `protobuf:"bytes,2,rep,name=teams" json:"teams"`
	Admin   bool           `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Association) Reset()                    { *m = Association{} }
func (m *Association) String() string            { return proto.CompactTextString(m) }
func (*Association) ProtoMessage()               {}
func (*Association) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{36} }

func (m *Association) GetAccount() DirectoryEntry {
	if m != nil {
		return m.Account
	}
	return DirectoryEntry{}
}

func (m *Association) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Association) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type AssociationList struct {
	Accounts []Association `protobuf:"bytes,1,rep,name=accounts" json:"accounts"`
	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *AssociationList) Reset()                    { *m = AssociationList{} }
func (m *AssociationList) String() string            { return proto.CompactTextString(m) }
func (*AssociationList) ProtoMessage()               {}
func (*AssociationList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{37} }

func (m *AssociationList) GetAccounts() []Association {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AssociationList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AssociationList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type TimeZoneList struct {
	Timezones []string `protobuf:"bytes,1,rep,name=timezones" json:"timezones,omitempty"`
}

func (m *TimeZoneList) Reset()                    { *m = TimeZoneList{} }
func (m *TimeZoneList) String() string            { return proto.CompactTextString(m) }
func (*TimeZoneList) ProtoMessage()               {}
func (*TimeZoneList) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{38} }

func (m *TimeZoneList) GetTimezones() []string {
	if m != nil {
		return m.Timezones
	}
	return nil
}

type TimeZoneListRequest struct {
}

func (m *TimeZoneListRequest) Reset()                    { *m = TimeZoneListRequest{} }
func (m *TimeZoneListRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeZoneListRequest) ProtoMessage()               {}
func (*TimeZoneListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{39} }

type ScheduledPerWeek struct {
	Week  string `protobuf:"bytes,1,opt,name=week,proto3" json:"week,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ScheduledPerWeek) Reset()                    { *m = ScheduledPerWeek{} }
func (m *ScheduledPerWeek) String() string            { return proto.CompactTextString(m) }
func (*ScheduledPerWeek) ProtoMessage()               {}
func (*ScheduledPerWeek) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{40} }

func (m *ScheduledPerWeek) GetWeek() string {
	if m != nil {
		return m.Week
	}
	return ""
}

func (m *ScheduledPerWeek) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GrowthGraphResponse struct {
	PeopleScheduledPerWeek map[string]int32 `protobuf:"bytes,1,rep,name=people_scheduled_per_week,json=peopleScheduledPerWeek" json:"people_scheduled_per_week,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PeopleOnShifts         int32            `protobuf:"varint,2,opt,name=people_on_shifts,json=peopleOnShifts,proto3" json:"people_on_shifts,omitempty"`
}

func (m *GrowthGraphResponse) Reset()                    { *m = GrowthGraphResponse{} }
func (m *GrowthGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*GrowthGraphResponse) ProtoMessage()               {}
func (*GrowthGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{41} }

func (m *GrowthGraphResponse) GetPeopleScheduledPerWeek() map[string]int32 {
	if m != nil {
		return m.PeopleScheduledPerWeek
	}
	return nil
}

func (m *GrowthGraphResponse) GetPeopleOnShifts() int32 {
	if m != nil {
		return m.PeopleOnShifts
	}
	return 0
}

type GrowthGraphRequest struct {
}

func (m *GrowthGraphRequest) Reset()                    { *m = GrowthGraphRequest{} }
func (m *GrowthGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*GrowthGraphRequest) ProtoMessage()               {}
func (*GrowthGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompany, []int{42} }

func init() {
	proto.RegisterType((*Company)(nil), "staffjoy.company.Company")
	proto.RegisterType((*CompanyList)(nil), "staffjoy.company.CompanyList")
	proto.RegisterType((*CompanyListRequest)(nil), "staffjoy.company.CompanyListRequest")
	proto.RegisterType((*CreateCompanyRequest)(nil), "staffjoy.company.CreateCompanyRequest")
	proto.RegisterType((*GetCompanyRequest)(nil), "staffjoy.company.GetCompanyRequest")
	proto.RegisterType((*Team)(nil), "staffjoy.company.Team")
	proto.RegisterType((*TeamList)(nil), "staffjoy.company.TeamList")
	proto.RegisterType((*TeamListRequest)(nil), "staffjoy.company.TeamListRequest")
	proto.RegisterType((*CreateTeamRequest)(nil), "staffjoy.company.CreateTeamRequest")
	proto.RegisterType((*GetTeamRequest)(nil), "staffjoy.company.GetTeamRequest")
	proto.RegisterType((*Job)(nil), "staffjoy.company.Job")
	proto.RegisterType((*JobList)(nil), "staffjoy.company.JobList")
	proto.RegisterType((*JobListRequest)(nil), "staffjoy.company.JobListRequest")
	proto.RegisterType((*CreateJobRequest)(nil), "staffjoy.company.CreateJobRequest")
	proto.RegisterType((*GetJobRequest)(nil), "staffjoy.company.GetJobRequest")
	proto.RegisterType((*Shift)(nil), "staffjoy.company.Shift")
	proto.RegisterType((*ShiftList)(nil), "staffjoy.company.ShiftList")
	proto.RegisterType((*ShiftListRequest)(nil), "staffjoy.company.ShiftListRequest")
	proto.RegisterType((*WorkerShiftListRequest)(nil), "staffjoy.company.WorkerShiftListRequest")
	proto.RegisterType((*BulkPublishShiftsRequest)(nil), "staffjoy.company.BulkPublishShiftsRequest")
	proto.RegisterType((*CreateShiftRequest)(nil), "staffjoy.company.CreateShiftRequest")
	proto.RegisterType((*GetShiftRequest)(nil), "staffjoy.company.GetShiftRequest")
	proto.RegisterType((*DirectoryEntry)(nil), "staffjoy.company.DirectoryEntry")
	proto.RegisterType((*NewDirectoryEntry)(nil), "staffjoy.company.NewDirectoryEntry")
	proto.RegisterType((*DirectoryEntryRequest)(nil), "staffjoy.company.DirectoryEntryRequest")
	proto.RegisterType((*DirectoryList)(nil), "staffjoy.company.DirectoryList")
	proto.RegisterType((*DirectoryListRequest)(nil), "staffjoy.company.DirectoryListRequest")
	proto.RegisterType((*AdminListRequest)(nil), "staffjoy.company.AdminListRequest")
	proto.RegisterType((*Admins)(nil), "staffjoy.company.Admins")
	proto.RegisterType((*AdminOfRequest)(nil), "staffjoy.company.AdminOfRequest")
	proto.RegisterType((*AdminOfList)(nil), "staffjoy.company.AdminOfList")
	proto.RegisterType((*WorkerListRequest)(nil), "staffjoy.company.WorkerListRequest")
	proto.RegisterType((*Workers)(nil), "staffjoy.company.Workers")
	proto.RegisterType((*Worker)(nil), "staffjoy.company.Worker")
	proto.RegisterType((*WorkerOfRequest)(nil), "staffjoy.company.WorkerOfRequest")
	proto.RegisterType((*WorkerOfList)(nil), "staffjoy.company.WorkerOfList")
	proto.RegisterType((*Association)(nil), "staffjoy.company.Association")
	proto.RegisterType((*AssociationList)(nil), "staffjoy.company.AssociationList")
	proto.RegisterType((*TimeZoneList)(nil), "staffjoy.company.TimeZoneList")
	proto.RegisterType((*TimeZoneListRequest)(nil), "staffjoy.company.TimeZoneListRequest")
	proto.RegisterType((*ScheduledPerWeek)(nil), "staffjoy.company.ScheduledPerWeek")
	proto.RegisterType((*GrowthGraphResponse)(nil), "staffjoy.company.GrowthGraphResponse")
	proto.RegisterType((*GrowthGraphRequest)(nil), "staffjoy.company.GrowthGraphRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompanyService service

type CompanyServiceClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// teams
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error)
	GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error)
	// Directory
	CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error)
	GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error)
	CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Workers
	ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error)
	GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error)
	GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error)
	GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error)
}

type companyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompanyServiceClient(cc *grpc.ClientConn) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListCompanies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error) {
	out := new(TeamList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTeams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerTeamInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkerShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/BulkPublishShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error) {
	out := new(DirectoryList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/Directory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error) {
	out := new(AssociationList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAssociations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetDirectoryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateDirectoryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error) {
	out := new(Admins)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListAdmins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error) {
	out := new(Workers)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error) {
	out := new(TimeZoneList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTimeZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error) {
	out := new(GrowthGraphResponse)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GrowthGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error) {
	out := new(WorkerOfList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error) {
	out := new(AdminOfList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanyService service

type CompanyServiceServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error)
	ListCompanies(context.Context, *CompanyListRequest) (*CompanyList, error)
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	UpdateCompany(context.Context, *Company) (*Company, error)
	// teams
	CreateTeam(context.Context, *CreateTeamRequest) (*Team, error)
	ListTeams(context.Context, *TeamListRequest) (*TeamList, error)
	GetTeam(context.Context, *GetTeamRequest) (*Team, error)
	UpdateTeam(context.Context, *Team) (*Team, error)
	GetWorkerTeamInfo(context.Context, *Worker) (*Worker, error)
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	ListJobs(context.Context, *JobListRequest) (*JobList, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	UpdateJob(context.Context, *Job) (*Job, error)
	CreateShift(context.Context, *CreateShiftRequest) (*Shift, error)
	ListShifts(context.Context, *ShiftListRequest) (*ShiftList, error)
	ListWorkerShifts(context.Context, *WorkerShiftListRequest) (*ShiftList, error)
	BulkPublishShifts(context.Context, *BulkPublishShiftsRequest) (*ShiftList, error)
	GetShift(context.Context, *GetShiftRequest) (*Shift, error)
	DeleteShift(context.Context, *GetShiftRequest) (*google_protobuf2.Empty, error)
	UpdateShift(context.Context, *Shift) (*Shift, error)
	// Directory
	CreateDirectory(context.Context, *NewDirectoryEntry) (*DirectoryEntry, error)
	Directory(context.Context, *DirectoryListRequest) (*DirectoryList, error)
	GetAssociations(context.Context, *DirectoryListRequest) (*AssociationList, error)
	GetDirectoryEntry(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	UpdateDirectoryEntry(context.Context, *DirectoryEntry) (*DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *AdminListRequest) (*Admins, error)
	CreateAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	GetAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	DeleteAdmin(context.Context, *DirectoryEntryRequest) (*google_protobuf2.Empty, error)
	// Workers
	ListWorkers(context.Context, *WorkerListRequest) (*Workers, error)
	GetWorker(context.Context, *Worker) (*DirectoryEntry, error)
	DeleteWorker(context.Context, *Worker) (*google_protobuf2.Empty, error)
	CreateWorker(context.Context, *Worker) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(context.Context, *TimeZoneListRequest) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(context.Context, *GrowthGraphRequest) (*GrowthGraphResponse, error)
	GetWorkerOf(context.Context, *WorkerOfRequest) (*WorkerOfList, error)
	GetAdminOf(context.Context, *AdminOfRequest) (*AdminOfList, error)
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanies(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTeams(ctx, req.(*TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListJobs(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListShifts(ctx, req.(*ShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkerShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkerShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, req.(*WorkerShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_BulkPublishShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPublishShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/BulkPublishShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, req.(*BulkPublishShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateShift(ctx, req.(*Shift))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, req.(*NewDirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Directory(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAssociations(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, req.(*DirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListAdmins(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkers(ctx, req.(*WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTimeZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTimeZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, req.(*TimeZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GrowthGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrowthGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GrowthGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, req.(*GrowthGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, req.(*WorkerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, req.(*AdminOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _CompanyService_CreateTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _CompanyService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _CompanyService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _CompanyService_UpdateTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _CompanyService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _CompanyService_CreateJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _CompanyService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _CompanyService_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _CompanyService_UpdateJob_Handler,
		},
		{
			MethodName: "CreateShift",
			Handler:    _CompanyService_CreateShift_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _CompanyService_ListShifts_Handler,
		},
		{
			MethodName: "ListWorkerShifts",
			Handler:    _CompanyService_ListWorkerShifts_Handler,
		},
		{
			MethodName: "BulkPublishShifts",
			Handler:    _CompanyService_BulkPublishShifts_Handler,
		},
		{
			MethodName: "GetShift",
			Handler:    _CompanyService_GetShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _CompanyService_DeleteShift_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _CompanyService_UpdateShift_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _CompanyService_CreateDirectory_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _CompanyService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _CompanyService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _CompanyService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "UpdateDirectoryEntry",
			Handler:    _CompanyService_UpdateDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _CompanyService_ListAdmins_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _CompanyService_CreateAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _CompanyService_GetAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _CompanyService_DeleteAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _CompanyService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _CompanyService_GetWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _CompanyService_DeleteWorker_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _CompanyService_CreateWorker_Handler,
		},
		{
			MethodName: "ListTimeZones",
			Handler:    _CompanyService_ListTimeZones_Handler,
		},
		{
			MethodName: "GrowthGraph",
			Handler:    _CompanyService_GrowthGraph_Handler,
		},
		{
			MethodName: "GetWorkerOf",
			Handler:    _CompanyService_GetWorkerOf_Handler,
		},
		{
			MethodName: "GetAdminOf",
			Handler:    _CompanyService_GetAdminOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Archived {
		dAtA[i] = 0x18
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DefaultTimezone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultTimezone)))
		i += copy(dAtA[i:], m.DefaultTimezone)
	}
	if len(m.DefaultDayWeekStarts) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultDayWeekStarts)))
		i += copy(dAtA[i:], m.DefaultDayWeekStarts)
	}
	return i, nil
}

func (m *CompanyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for _, msg := range m.Companies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *CompanyListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *CreateCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DefaultTimezone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultTimezone)))
		i += copy(dAtA[i:], m.DefaultTimezone)
	}
	if len(m.DefaultDayWeekStarts) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultDayWeekStarts)))
		i += copy(dAtA[i:], m.DefaultDayWeekStarts)
	}
	return i, nil
}

func (m *GetCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Archived {
		dAtA[i] = 0x20
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Timezone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Timezone)))
		i += copy(dAtA[i:], m.Timezone)
	}
	if len(m.DayWeekStarts) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DayWeekStarts)))
		i += copy(dAtA[i:], m.DayWeekStarts)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	return i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TeamListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	return i, nil
}

func (m *CreateTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Timezone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Timezone)))
		i += copy(dAtA[i:], m.Timezone)
	}
	if len(m.DayWeekStarts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DayWeekStarts)))
		i += copy(dAtA[i:], m.DayWeekStarts)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	return i, nil
}

func (m *GetTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Archived {
		dAtA[i] = 0x28
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	return i, nil
}

func (m *JobList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, msg := range m.Jobs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *JobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	return i, nil
}

func (m *CreateJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateJobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	return i, nil
}

func (m *GetJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	return i, nil
}

func (m *Shift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Stop, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.JobUuid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i += copy(dAtA[i:], m.JobUuid)
	}
	if len(m.Published) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Published)))
		i += copy(dAtA[i:], m.Published)
	}
	return i, nil
}

func (m *ShiftList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShiftList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shifts) > 0 {
		for _, msg := range m.Shifts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *ShiftListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShiftListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.JobUuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i += copy(dAtA[i:], m.JobUuid)
	}
	if len(m.ShiftStartAfter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.ShiftStartAfter)))
		i += copy(dAtA[i:], m.ShiftStartAfter)
	}
	if len(m.ShiftStartBefore) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.ShiftStartBefore)))
		i += copy(dAtA[i:], m.ShiftStartBefore)
	}
	return i, nil
}

func (m *WorkerShiftListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerShiftListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.WorkerUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.WorkerUuid)))
		i += copy(dAtA[i:], m.WorkerUuid)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *BulkPublishShiftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkPublishShiftsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.JobUuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i += copy(dAtA[i:], m.JobUuid)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x32
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.Published {
		dAtA[i] = 0x38
		i++
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateShiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateShiftRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)))
	n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCompany(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)))
	n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Stop, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.JobUuid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i += copy(dAtA[i:], m.JobUuid)
	}
	if m.Published {
		dAtA[i] = 0x40
		i++
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetShiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShiftRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	return i, nil
}

func (m *DirectoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.InternalId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i += copy(dAtA[i:], m.InternalId)
	}
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.ConfirmedAndActive {
		dAtA[i] = 0x38
		i++
		if m.ConfirmedAndActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Phonenumber) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Phonenumber)))
		i += copy(dAtA[i:], m.Phonenumber)
	}
	if len(m.PhotoUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.PhotoUrl)))
		i += copy(dAtA[i:], m.PhotoUrl)
	}
	return i, nil
}

func (m *NewDirectoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDirectoryEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Phonenumber) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Phonenumber)))
		i += copy(dAtA[i:], m.Phonenumber)
	}
	if len(m.InternalId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i += copy(dAtA[i:], m.InternalId)
	}
	return i, nil
}

func (m *DirectoryEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	return i, nil
}

func (m *DirectoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *DirectoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *AdminListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	return i, nil
}

func (m *Admins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.Admins) > 0 {
		for _, msg := range m.Admins {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AdminOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminOfRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	return i, nil
}

func (m *AdminOfList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminOfList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.Companies) > 0 {
		for _, msg := range m.Companies {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorkerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	return i, nil
}

func (m *Workers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.Workers) > 0 {
		for _, msg := range m.Workers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i += copy(dAtA[i:], m.CompanyUuid)
	}
	if len(m.TeamUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i += copy(dAtA[i:], m.TeamUuid)
	}
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	return i, nil
}

func (m *WorkerOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerOfRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	return i, nil
}

func (m *WorkerOfList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerOfList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i += copy(dAtA[i:], m.UserUuid)
	}
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Association) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Association) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCompany(dAtA, i, uint64(m.Account.Size()))
	n11, err := m.Account.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Admin {
		dAtA[i] = 0x18
		i++
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AssociationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssociationList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *TimeZoneList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeZoneList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for _, s := range m.Timezones {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TimeZoneListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeZoneListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ScheduledPerWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledPerWeek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Week) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Week)))
		i += copy(dAtA[i:], m.Week)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GrowthGraphResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrowthGraphResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeopleScheduledPerWeek) > 0 {
		for k, _ := range m.PeopleScheduledPerWeek {
			dAtA[i] = 0xa
			i++
			v := m.PeopleScheduledPerWeek[k]
			mapSize := 1 + len(k) + sovCompany(uint64(len(k))) + 1 + sovCompany(uint64(v))
			i = encodeVarintCompany(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompany(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintCompany(dAtA, i, uint64(v))
		}
	}
	if m.PeopleOnShifts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompany(dAtA, i, uint64(m.PeopleOnShifts))
	}
	return i, nil
}

func (m *GrowthGraphRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrowthGraphRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintCompany(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Company) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.DefaultTimezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultDayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *CompanyList) Size() (n int) {
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for _, e := range m.Companies {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *CompanyListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	return n
}

func (m *CreateCompanyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultTimezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultDayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetCompanyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Team) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *TeamList) Size() (n int) {
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *TeamListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *CreateTeamRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetTeamRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Job) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *JobList) Size() (n int) {
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *JobListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *CreateJobRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetJobRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Shift) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)
	n += 1 + l + sovCompany(uint64(l))
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Published)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *ShiftList) Size() (n int) {
	var l int
	_ = l
	if len(m.Shifts) > 0 {
		for _, e := range m.Shifts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	return n
}

func (m *ShiftListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.ShiftStartAfter)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.ShiftStartBefore)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerShiftListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.WorkerUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	return n
}

func (m *BulkPublishShiftsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	if m.Published {
		n += 2
	}
	return n
}

func (m *CreateShiftRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)
	n += 1 + l + sovCompany(uint64(l))
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Published {
		n += 2
	}
	return n
}

func (m *GetShiftRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.ConfirmedAndActive {
		n += 2
	}
	l = len(m.Phonenumber)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.PhotoUrl)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *NewDirectoryEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Phonenumber)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryEntryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryList) Size() (n int) {
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *DirectoryListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *AdminListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Admins) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *AdminOfRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *AdminOfList) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Companies) > 0 {
		for _, e := range m.Companies {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *WorkerListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Workers) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *Worker) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerOfRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerOfList) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *Association) Size() (n int) {
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovCompany(uint64(l))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Admin {
		n += 2
	}
	return n
}

func (m *AssociationList) Size() (n int) {
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *TimeZoneList) Size() (n int) {
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for _, s := range m.Timezones {
			l = len(s)
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *TimeZoneListRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ScheduledPerWeek) Size() (n int) {
	var l int
	_ = l
	l = len(m.Week)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovCompany(uint64(m.Count))
	}
	return n
}

func (m *GrowthGraphResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.PeopleScheduledPerWeek) > 0 {
		for k, v := range m.PeopleScheduledPerWeek {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCompany(uint64(len(k))) + 1 + sovCompany(uint64(v))
			n += mapEntrySize + 1 + sovCompany(uint64(mapEntrySize))
		}
	}
	if m.PeopleOnShifts != 0 {
		n += 1 + sovCompany(uint64(m.PeopleOnShifts))
	}
	return n
}

func (m *GrowthGraphRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovCompany(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompany(x uint64) (n int) {
	return sovCompany(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTimezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTimezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, Company{})
			if err := m.Companies[len(m.Companies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTimezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTimezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, Job{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Stop, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Published = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShiftList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShiftList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShiftList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shifts = append(m.Shifts, Shift{})
			if err := m.Shifts[len(m.Shifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShiftListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShiftListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShiftListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShiftStartAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShiftStartBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerShiftListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerShiftListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerShiftListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkPublishShiftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkPublishShiftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkPublishShiftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateShiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateShiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateShiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Stop, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedAndActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfirmedAndActive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phonenumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phonenumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDirectoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDirectoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDirectoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phonenumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phonenumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, DirectoryEntry{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, DirectoryEntry{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminOfList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminOfList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminOfList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, Company{})
			if err := m.Companies[len(m.Companies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, DirectoryEntry{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerOfList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerOfList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerOfList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Association) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Association: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Association: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssociationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssociationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssociationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, Association{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeZoneList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeZoneList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeZoneList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezones = append(m.Timezones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeZoneListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeZoneListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeZoneListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledPerWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledPerWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledPerWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Week = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrowthGraphResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrowthGraphResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrowthGraphResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleScheduledPerWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeopleScheduledPerWeek == nil {
				m.PeopleScheduledPerWeek = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCompany
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCompany
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCompany
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCompany
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCompany(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCompany
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PeopleScheduledPerWeek[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleOnShifts", wireType)
			}
			m.PeopleOnShifts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeopleOnShifts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrowthGraphRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrowthGraphRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrowthGraphRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompany(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompany
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompany
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompany(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompany = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompany   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("company.proto", fileDescriptorCompany) }

var fileDescriptorCompany = []byte{
	// 2641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdb, 0x6f, 0x1b, 0xc7,
	0xf5, 0xce, 0x92, 0x22, 0x45, 0x1e, 0x5a, 0xb7, 0x89, 0x24, 0x53, 0x94, 0x62, 0xca, 0x13, 0x5f,
	0x14, 0xc5, 0x22, 0x63, 0xc5, 0xfe, 0xc5, 0x50, 0x1c, 0xc7, 0x92, 0x65, 0xe8, 0x67, 0xf5, 0x62,
	0x81, 0xb2, 0x61, 0x20, 0x2f, 0xc4, 0x92, 0x1c, 0x4a, 0x94, 0x48, 0x2e, 0xbb, 0xbb, 0x94, 0xaa,
	0x24, 0x06, 0xdc, 0xa2, 0x68, 0x0d, 0xc4, 0x69, 0x0b, 0xe4, 0xa5, 0x29, 0xd0, 0x0b, 0xd0, 0xbe,
	0x15, 0xe8, 0xdf, 0x91, 0x87, 0x3e, 0x14, 0x28, 0xd0, 0x47, 0xb5, 0x30, 0xf2, 0xd0, 0x67, 0xfd,
	0x05, 0xc5, 0x9c, 0x99, 0x5d, 0xee, 0x8d, 0xe4, 0x52, 0x52, 0xd0, 0x37, 0xee, 0xce, 0x99, 0x73,
	0xbe, 0xf9, 0xce, 0x37, 0x67, 0x66, 0x0f, 0x61, 0xa4, 0xac, 0x35, 0x5a, 0x6a, 0xf3, 0x28, 0xd7,
	0xd2, 0x35, 0x53, 0x23, 0xe3, 0x86, 0xa9, 0x56, 0xab, 0x7b, 0xda, 0x51, 0x4e, 0xbe, 0xcf, 0xcc,
	0xed, 0x68, 0xda, 0x4e, 0x9d, 0xe5, 0xd5, 0x56, 0x2d, 0xaf, 0x36, 0x9b, 0x9a, 0xa9, 0x9a, 0x35,
	0xad, 0x69, 0x08, 0xfb, 0x4c, 0x56, 0x8e, 0xe2, 0x53, 0xa9, 0x5d, 0xcd, 0x9b, 0xb5, 0x06, 0x33,
	0x4c, 0xb5, 0xd1, 0x92, 0x06, 0xb3, 0x5e, 0x03, 0xd6, 0x68, 0x99, 0x32, 0x5a, 0x66, 0x69, 0xa7,
	0x66, 0xee, 0xb6, 0x4b, 0x3c, 0x56, 0x7e, 0x47, 0xdb, 0xd1, 0x3a, 0x56, 0xfc, 0x09, 0x1f, 0xf0,
	0x97, 0x30, 0xa7, 0xbf, 0x8b, 0xc0, 0xf0, 0x03, 0x01, 0x8b, 0x5c, 0x86, 0xa1, 0x76, 0xbb, 0x56,
	0x49, 0x2b, 0xf3, 0xca, 0x42, 0x72, 0x6d, 0xe4, 0xe4, 0x38, 0x9b, 0xac, 0x94, 0x56, 0x28, 0x7f,
	0x47, 0x0b, 0x38, 0xc4, 0x4d, 0x9a, 0x6a, 0x83, 0xa5, 0x23, 0x6e, 0x13, 0xfe, 0x8e, 0x16, 0x70,
	0x88, 0x2c, 0x41, 0x42, 0xd5, 0xcb, 0xbb, 0xb5, 0x03, 0x56, 0x49, 0x47, 0xe7, 0x95, 0x85, 0xc4,
	0xda, 0xc4, 0xc9, 0x71, 0x76, 0x84, 0x9b, 0x59, 0xef, 0x69, 0xc1, 0x36, 0x21, 0xeb, 0x30, 0x5e,
	0x61, 0x55, 0xb5, 0x5d, 0x37, 0x8b, 0x7c, 0x9d, 0x9f, 0x6a, 0x4d, 0x96, 0x1e, 0x42, 0xef, 0x33,
	0x27, 0xc7, 0xd9, 0x29, 0x3e, 0xcd, 0x3b, 0x4e, 0x0b, 0x63, 0xf2, 0xd5, 0x13, 0xf9, 0x86, 0x3c,
	0x83, 0x8b, 0x96, 0x55, 0x45, 0x3d, 0x2a, 0x1e, 0x32, 0xb6, 0x5f, 0x34, 0x4c, 0x55, 0x37, 0x8d,
	0x74, 0x0c, 0x9d, 0xcd, 0x9f, 0x1c, 0x67, 0xe7, 0x9c, 0xce, 0x3c, 0x66, 0xb4, 0x30, 0x29, 0x47,
	0xd6, 0xd5, 0xa3, 0x67, 0x8c, 0xed, 0x6f, 0x8b, 0xd7, 0x9f, 0x42, 0x4a, 0xd2, 0xf3, 0xfd, 0x9a,
	0x61, 0x92, 0x8f, 0x20, 0x29, 0x92, 0x58, 0x63, 0x46, 0x5a, 0x99, 0x8f, 0x2e, 0xa4, 0x96, 0x67,
	0x72, 0xde, 0xfc, 0xe6, 0xe4, 0x8c, 0xb5, 0xa1, 0x6f, 0x8e, 0xb3, 0x6f, 0x14, 0x3a, 0x33, 0xc8,
	0x24, 0xc4, 0xea, 0xb5, 0x46, 0xcd, 0x44, 0xfe, 0x62, 0x05, 0xf1, 0x40, 0xa6, 0x21, 0xae, 0x55,
	0xab, 0x06, 0x33, 0x91, 0xaf, 0x58, 0x41, 0x3e, 0xd1, 0x35, 0x20, 0x8e, 0xd8, 0x05, 0xf6, 0xa3,
	0x36, 0x33, 0x9c, 0xd6, 0x8a, 0xd3, 0x3a, 0xd8, 0x37, 0x7d, 0xa5, 0xc0, 0xe4, 0x03, 0x9d, 0xa9,
	0x26, 0x93, 0xae, 0x2c, 0x37, 0x44, 0x66, 0x12, 0x93, 0x2d, 0x53, 0xf7, 0x4e, 0x40, 0x2e, 0x30,
	0xd3, 0x7e, 0xc2, 0x6f, 0x77, 0x27, 0x3c, 0x8a, 0x33, 0x82, 0xe9, 0xbc, 0x0e, 0x13, 0x1b, 0xcc,
	0xf4, 0x43, 0xe9, 0xe8, 0x4e, 0x08, 0x8d, 0xfe, 0x2d, 0x02, 0x43, 0x4f, 0x98, 0xda, 0x08, 0x23,
	0xca, 0x3b, 0x70, 0x41, 0x32, 0x5f, 0x44, 0x53, 0x21, 0xce, 0xa9, 0x93, 0xe3, 0xec, 0x04, 0x37,
	0x75, 0x8e, 0xd1, 0x42, 0x4a, 0x3e, 0x3e, 0x75, 0xca, 0x39, 0x1a, 0x4e, 0xce, 0x43, 0xfd, 0xe5,
	0xbc, 0x04, 0x09, 0x9b, 0x3a, 0xa1, 0x3c, 0xdb, 0xbc, 0x23, 0x5f, 0xdb, 0x84, 0xdc, 0x87, 0x31,
	0x2f, 0x7d, 0x71, 0x9c, 0x95, 0x3e, 0x39, 0xce, 0x4e, 0xa2, 0x5e, 0xbd, 0x3a, 0x1d, 0xa9, 0x38,
	0x19, 0x25, 0x57, 0x20, 0x56, 0xd6, 0xea, 0x9a, 0x9e, 0x1e, 0xc6, 0x79, 0xa3, 0x27, 0xc7, 0x59,
	0x10, 0xab, 0xae, 0x6b, 0x3a, 0x2d, 0x88, 0x41, 0x7a, 0x0f, 0x12, 0x9c, 0x4d, 0xd4, 0xf0, 0x32,
	0xc4, 0x4c, 0xa6, 0x36, 0x2c, 0xfd, 0x4e, 0xfb, 0xf5, 0xcb, 0x4d, 0xa5, 0x78, 0x85, 0x29, 0xbd,
	0x05, 0x63, 0xd6, 0x7c, 0x2b, 0x6b, 0x97, 0x3d, 0xac, 0x8b, 0xec, 0x39, 0xe9, 0xa5, 0x7f, 0x56,
	0x60, 0x42, 0x88, 0x8f, 0x4f, 0x0e, 0x3f, 0xd1, 0x16, 0x67, 0xc4, 0x21, 0xce, 0x8c, 0x83, 0x59,
	0x21, 0xb1, 0x0e, 0x8d, 0xd7, 0xfc, 0x34, 0x62, 0x0d, 0xf1, 0x92, 0x35, 0x69, 0x91, 0x85, 0xa9,
	0xb1, 0xc8, 0xd9, 0x80, 0xd1, 0x0d, 0x66, 0x0e, 0x0e, 0xb1, 0x23, 0x36, 0x29, 0xda, 0x17, 0x11,
	0x88, 0x6e, 0x6a, 0xa5, 0x30, 0x9a, 0x5d, 0x0a, 0xd4, 0x2c, 0x9c, 0x1c, 0x67, 0xe3, 0xdc, 0x74,
	0xc9, 0x23, 0xd4, 0x3c, 0x24, 0x79, 0x22, 0x84, 0xad, 0x50, 0x2b, 0x39, 0x39, 0xce, 0x8e, 0xa2,
	0xae, 0xac, 0x01, 0x2e, 0x2c, 0xa6, 0x36, 0x5c, 0xca, 0x1e, 0x0a, 0xa7, 0xec, 0x58, 0x7f, 0x65,
	0xdb, 0x42, 0x8b, 0xf7, 0x12, 0xda, 0x0a, 0x0c, 0x6f, 0x6a, 0x25, 0xd4, 0x59, 0x1e, 0x86, 0xf6,
	0xb4, 0x92, 0x25, 0xb3, 0x29, 0xbf, 0xcc, 0x36, 0xb5, 0x92, 0x54, 0x19, 0x1a, 0xd2, 0x2d, 0x18,
	0x95, 0x73, 0x07, 0xc8, 0xc3, 0xac, 0x93, 0x99, 0x88, 0xd4, 0x85, 0x64, 0x81, 0x7e, 0x0e, 0xe3,
	0x42, 0x7f, 0x9b, 0x5a, 0xe9, 0x9c, 0x7c, 0xda, 0xda, 0x8c, 0x3a, 0xb4, 0x69, 0xeb, 0x6a, 0xc8,
	0xa9, 0xab, 0x32, 0x8c, 0x6c, 0x30, 0xd3, 0x11, 0x3a, 0xa0, 0xd0, 0xf9, 0xe0, 0x44, 0xfa, 0xc0,
	0x89, 0x7a, 0x96, 0xf8, 0x97, 0x28, 0xc4, 0xb6, 0x77, 0x6b, 0x55, 0xf3, 0x3b, 0x50, 0x5d, 0xce,
	0xaf, 0x3a, 0x4b, 0x22, 0xc9, 0x20, 0xd1, 0xfd, 0x3f, 0xc4, 0x70, 0xf7, 0x21, 0x0d, 0xa9, 0xe5,
	0x4c, 0x4e, 0x5c, 0x54, 0x72, 0xd6, 0x15, 0x24, 0xf7, 0xc4, 0xba, 0xc9, 0xac, 0x4d, 0xf3, 0xbc,
	0x5b, 0x12, 0xc2, 0x49, 0xf4, 0xd7, 0xff, 0xca, 0x2a, 0x05, 0xe1, 0x80, 0x3c, 0x84, 0x21, 0xc3,
	0xd4, 0x5a, 0xa8, 0xcb, 0xde, 0x8e, 0xa6, 0xa4, 0xa3, 0xa4, 0x70, 0xa4, 0xb5, 0x84, 0x1f, 0x9c,
	0xce, 0xb7, 0x4d, 0xdb, 0x60, 0xba, 0x58, 0x40, 0xdc, 0xbd, 0x6d, 0xec, 0x01, 0x5a, 0x48, 0xf0,
	0xdf, 0xb8, 0x82, 0x1b, 0x90, 0xd8, 0xd3, 0x4a, 0xc2, 0x7e, 0xd8, 0x5d, 0xbe, 0xad, 0xf7, 0xb4,
	0x30, 0xbc, 0xa7, 0x95, 0xd0, 0xfa, 0x3d, 0x48, 0xb6, 0xda, 0xa5, 0x7a, 0xcd, 0xd8, 0x65, 0x95,
	0x74, 0xc2, 0xed, 0xde, 0x1e, 0xa0, 0x85, 0x8e, 0x11, 0xfd, 0x8f, 0x02, 0x49, 0xcc, 0x16, 0xee,
	0x90, 0xdb, 0x10, 0x37, 0xf8, 0x83, 0xb5, 0x47, 0x2e, 0xfa, 0xf7, 0x08, 0x1a, 0xcb, 0x5d, 0x22,
	0x8d, 0xc9, 0x16, 0x4c, 0xe0, 0x2f, 0x51, 0xea, 0x8a, 0x6a, 0xd5, 0x64, 0x3a, 0xa6, 0xb2, 0x37,
	0x53, 0x09, 0xee, 0x04, 0xc9, 0x19, 0xc3, 0xe9, 0x58, 0x13, 0x57, 0xf9, 0x64, 0x52, 0x00, 0xe2,
	0xf4, 0x58, 0x62, 0x55, 0x4d, 0x17, 0x0a, 0x0f, 0xeb, 0x72, 0xbc, 0xe3, 0x72, 0x0d, 0x67, 0xd3,
	0x6f, 0x15, 0x18, 0xb7, 0x97, 0x7a, 0x5e, 0x9b, 0x6f, 0xd6, 0x99, 0x50, 0xb9, 0x15, 0xec, 0xe4,
	0xcd, 0x38, 0x92, 0x27, 0x36, 0xa2, 0x9d, 0xa9, 0xc5, 0x20, 0xca, 0xc4, 0x21, 0xe0, 0x23, 0xe3,
	0x46, 0x20, 0x19, 0xa8, 0x9e, 0x80, 0x65, 0xfe, 0x21, 0x02, 0xd3, 0xcf, 0x34, 0x7d, 0x9f, 0xe9,
	0xe7, 0xbe, 0xd8, 0x2c, 0xa4, 0x0e, 0xd1, 0xb3, 0x73, 0xb9, 0x20, 0x5e, 0xa1, 0x41, 0xa0, 0x10,
	0x86, 0xce, 0x5f, 0x08, 0xb1, 0x33, 0x09, 0xe1, 0x9f, 0x11, 0x48, 0xaf, 0xb5, 0xeb, 0xfb, 0x5b,
	0x62, 0x17, 0x20, 0x4d, 0xc6, 0xff, 0x5a, 0x10, 0x5b, 0xdd, 0x04, 0x71, 0xce, 0xd4, 0xc5, 0xcf,
	0x42, 0x1d, 0x99, 0x73, 0x16, 0x18, 0x5e, 0x8f, 0x12, 0xce, 0x62, 0xf2, 0xc7, 0x08, 0x10, 0x71,
	0xbc, 0x21, 0xa7, 0xe7, 0x45, 0xe9, 0x4a, 0xf8, 0x2a, 0xde, 0xc1, 0x2e, 0xeb, 0xf6, 0x9d, 0xd0,
	0x75, 0xbb, 0x33, 0x55, 0x94, 0xea, 0x59, 0x5f, 0xa9, 0xee, 0x92, 0xc8, 0x61, 0x77, 0x22, 0xe7,
	0xbc, 0x35, 0xd8, 0x45, 0x11, 0x83, 0xb1, 0x0d, 0x66, 0xba, 0xe8, 0x09, 0x3a, 0x84, 0x7b, 0xf2,
	0xe1, 0xe5, 0x33, 0xea, 0xbf, 0xe8, 0xbe, 0x8a, 0xc0, 0xe8, 0x7a, 0x4d, 0x67, 0x65, 0x53, 0xd3,
	0x8f, 0x1e, 0x36, 0x4d, 0xfd, 0xc8, 0xbd, 0x1e, 0xc5, 0xb3, 0x9e, 0x2c, 0xa4, 0x6a, 0x4d, 0x93,
	0xe9, 0x4d, 0xb5, 0x5e, 0xb4, 0x23, 0x82, 0xf5, 0xea, 0x51, 0x98, 0x98, 0xf6, 0x3d, 0x24, 0xe6,
	0xbe, 0x87, 0xb0, 0x86, 0x5a, 0xab, 0x4b, 0x02, 0xc5, 0x03, 0x79, 0x0f, 0x26, 0xcb, 0x5a, 0xb3,
	0x5a, 0xd3, 0x1b, 0xac, 0x52, 0x54, 0x9b, 0x95, 0xa2, 0x5a, 0x36, 0x6b, 0x07, 0x4c, 0x0a, 0x8a,
	0xd8, 0x63, 0xab, 0xcd, 0xca, 0x2a, 0x8e, 0x90, 0x79, 0x48, 0xb5, 0x76, 0xb5, 0x26, 0x6b, 0xb6,
	0x1b, 0x25, 0xa6, 0x8b, 0xa3, 0xad, 0xe0, 0x7c, 0xc5, 0x97, 0xd7, 0xda, 0xd5, 0x4c, 0xad, 0xd8,
	0xd6, 0xeb, 0xe9, 0xa4, 0x58, 0x1e, 0xbe, 0x78, 0xaa, 0xd7, 0xe9, 0x9f, 0x14, 0x98, 0xf8, 0x21,
	0x3b, 0xf4, 0x30, 0x72, 0xca, 0x7b, 0xbf, 0xbd, 0xa6, 0xa8, 0x73, 0x4d, 0x1e, 0x84, 0x43, 0x7e,
	0x84, 0x1e, 0x8e, 0x63, 0x5e, 0x8e, 0xe9, 0x33, 0x98, 0x72, 0x23, 0x1c, 0x6c, 0x03, 0x75, 0xb2,
	0x1b, 0x71, 0x67, 0x97, 0xfe, 0x44, 0x81, 0x11, 0xdb, 0x33, 0x1e, 0xf4, 0x6b, 0x90, 0x50, 0xcb,
	0x65, 0xad, 0xdd, 0xb4, 0x8f, 0xfa, 0x79, 0xff, 0x51, 0xef, 0x06, 0x23, 0xcf, 0x7c, 0x7b, 0xde,
	0x80, 0xbd, 0x83, 0x1d, 0x98, 0x74, 0x41, 0x18, 0x60, 0x6d, 0x83, 0x05, 0xba, 0x0d, 0xe3, 0xab,
	0x95, 0x46, 0xad, 0x39, 0xe0, 0xa7, 0xe1, 0x3e, 0xc4, 0x71, 0x9a, 0x11, 0x06, 0xd1, 0x3d, 0x88,
	0xab, 0x68, 0x9c, 0x8e, 0x0c, 0x44, 0x9e, 0x9c, 0x45, 0x97, 0x60, 0x14, 0x83, 0x3d, 0xae, 0x5a,
	0x08, 0x7b, 0xed, 0x4e, 0x5a, 0x83, 0x94, 0x34, 0xc7, 0xe4, 0xf5, 0xdc, 0xc9, 0xae, 0x86, 0x50,
	0x64, 0xd0, 0x86, 0x10, 0xdd, 0x86, 0x09, 0x71, 0x79, 0x38, 0xcf, 0xaf, 0x9e, 0x2f, 0x14, 0x18,
	0x16, 0x5e, 0x8d, 0x33, 0x1f, 0x06, 0xf7, 0x61, 0x58, 0x5c, 0x38, 0x8c, 0x74, 0x74, 0x20, 0xee,
	0xad, 0x69, 0x94, 0x41, 0x5c, 0x80, 0xf9, 0x4e, 0xcf, 0x7a, 0x9a, 0x83, 0x31, 0x11, 0x26, 0x64,
	0x92, 0x8b, 0x70, 0xc1, 0xb2, 0xef, 0x9f, 0x65, 0xbb, 0x65, 0x12, 0x09, 0xdf, 0x32, 0xf9, 0x5a,
	0x81, 0xd4, 0xaa, 0x61, 0x68, 0xe5, 0x1a, 0x76, 0x77, 0x39, 0x93, 0x72, 0x2f, 0xa3, 0xfb, 0x01,
	0x98, 0x94, 0xd3, 0x4e, 0x83, 0x82, 0x6f, 0x66, 0xdc, 0x04, 0xa2, 0x15, 0x5b, 0x10, 0x0f, 0xf4,
	0x85, 0x02, 0x63, 0x0e, 0x6c, 0x48, 0xc0, 0xc7, 0xbe, 0x1a, 0xf5, 0x96, 0x3f, 0x80, 0x63, 0xd2,
	0x19, 0x0b, 0xd4, 0x0d, 0xb8, 0xc0, 0x2f, 0x03, 0x9f, 0x68, 0x4d, 0x86, 0xe1, 0xe7, 0x20, 0x69,
	0xb5, 0x73, 0x44, 0xfc, 0x64, 0xa1, 0xf3, 0x82, 0x4e, 0xc1, 0x9b, 0x4e, 0x6b, 0x99, 0x61, 0x7a,
	0x17, 0xc6, 0xb7, 0xcb, 0xbb, 0xac, 0xd2, 0xae, 0xb3, 0xca, 0x16, 0xd3, 0x9f, 0x31, 0xb6, 0xcf,
	0xcf, 0x90, 0x43, 0xc6, 0xf6, 0xad, 0xf3, 0x9d, 0xff, 0x16, 0xdf, 0xe7, 0x9c, 0x79, 0x09, 0x0d,
	0x1f, 0xe8, 0xcb, 0x08, 0xbc, 0xb9, 0xa1, 0x6b, 0x87, 0xe6, 0xee, 0x86, 0xae, 0xb6, 0x76, 0x0b,
	0xcc, 0x68, 0x69, 0x4d, 0x83, 0x91, 0xcf, 0x61, 0xa6, 0xc5, 0xb4, 0x56, 0x9d, 0x15, 0x0d, 0xcb,
	0x79, 0xb1, 0xc5, 0xf4, 0xa2, 0x74, 0xcb, 0xa9, 0x59, 0xf5, 0x53, 0x13, 0xe0, 0x29, 0xb7, 0x85,
	0x6e, 0xbc, 0x10, 0xc5, 0x61, 0x33, 0xdd, 0x0a, 0x1c, 0x24, 0x0b, 0x30, 0x2e, 0xa3, 0x6b, 0xcd,
	0xa2, 0xfc, 0x3c, 0x14, 0xb0, 0x47, 0xc5, 0xfb, 0xc7, 0x4d, 0x71, 0x85, 0xce, 0x3c, 0x82, 0xd9,
	0x1e, 0x01, 0xc8, 0x38, 0x44, 0xf7, 0xd9, 0x91, 0xe4, 0x81, 0xff, 0xe4, 0x34, 0x1c, 0xa8, 0xf5,
	0x36, 0xb3, 0x68, 0xc0, 0x87, 0x95, 0xc8, 0x1d, 0x85, 0x4e, 0x02, 0x71, 0xe1, 0x47, 0x7a, 0x97,
	0x7f, 0x73, 0x0d, 0x46, 0x65, 0xe9, 0xda, 0x66, 0xfa, 0x41, 0xad, 0xcc, 0x48, 0x1d, 0x46, 0x5c,
	0xed, 0x64, 0x72, 0x2d, 0xa0, 0xda, 0x05, 0xf4, 0x9b, 0x33, 0xdd, 0xab, 0x22, 0x4d, 0xff, 0xf4,
	0x1f, 0xdf, 0x7e, 0x15, 0x21, 0x74, 0x24, 0x7f, 0x70, 0x33, 0x6f, 0xd7, 0xc6, 0x15, 0x65, 0x91,
	0xec, 0xc3, 0x08, 0x4f, 0xf7, 0x03, 0xbb, 0x81, 0x7e, 0xa5, 0xab, 0x17, 0x87, 0x2c, 0x32, 0x6f,
	0xf5, 0xb4, 0xa2, 0x53, 0x18, 0x6f, 0x8c, 0xb8, 0xe3, 0x91, 0x3d, 0x80, 0x4e, 0x6f, 0x9a, 0xbc,
	0x1d, 0x90, 0x61, 0x6f, 0xe7, 0xba, 0xd7, 0xa2, 0xe6, 0x30, 0xc8, 0x34, 0x99, 0x74, 0x05, 0xc9,
	0x7f, 0xc6, 0xeb, 0xcb, 0x73, 0x52, 0x85, 0x91, 0xa7, 0xad, 0x8a, 0x83, 0xc6, 0xee, 0x9e, 0x7a,
	0x05, 0xc9, 0x62, 0x90, 0x99, 0x4c, 0x60, 0x10, 0x4e, 0xe0, 0x8f, 0x01, 0x3a, 0x0d, 0xd8, 0xa0,
	0x35, 0xf9, 0xda, 0xb3, 0x99, 0x2e, 0x65, 0x85, 0x2e, 0x61, 0xac, 0xeb, 0x94, 0x7a, 0x62, 0x39,
	0x4b, 0xfa, 0xf3, 0x3c, 0x56, 0x1d, 0x1e, 0xf9, 0x00, 0x92, 0x9c, 0xec, 0x27, 0x58, 0x85, 0x2e,
	0x07, 0xfb, 0x74, 0xe6, 0x2c, 0xd3, 0xdd, 0x84, 0x2e, 0x62, 0xe8, 0x2b, 0x24, 0x44, 0x68, 0x72,
	0x00, 0xc3, 0xb2, 0x99, 0x4b, 0xe6, 0x03, 0x53, 0x18, 0x66, 0xad, 0x37, 0x31, 0xe0, 0xbb, 0xe4,
	0x9d, 0xfe, 0x01, 0xad, 0x8c, 0xea, 0x00, 0x22, 0xa3, 0x18, 0xba, 0x8b, 0xe3, 0xae, 0x01, 0x6f,
	0x61, 0xc0, 0x5c, 0x26, 0x7c, 0x40, 0xce, 0xb1, 0x81, 0xff, 0xa6, 0x88, 0x63, 0x8c, 0xbb, 0x79,
	0xd4, 0xac, 0x6a, 0x24, 0xed, 0x0f, 0x21, 0x2c, 0x32, 0x5d, 0x47, 0xba, 0x12, 0x6c, 0x9f, 0x88,
	0x22, 0x76, 0x8d, 0xfb, 0xff, 0xb9, 0x02, 0x49, 0xbb, 0xa9, 0x4a, 0x68, 0x37, 0x49, 0x75, 0xda,
	0x9e, 0x99, 0xe0, 0xd6, 0x2f, 0xbd, 0x87, 0x41, 0xef, 0xd0, 0xf7, 0xc3, 0xac, 0xd9, 0xbe, 0x15,
	0x3c, 0xcf, 0xef, 0x69, 0x25, 0x54, 0xd8, 0xcf, 0x14, 0x48, 0x70, 0x79, 0x6c, 0x6a, 0x25, 0x23,
	0x28, 0xd7, 0xee, 0x5e, 0x72, 0xd0, 0x36, 0x92, 0x16, 0xf4, 0x43, 0x44, 0x72, 0x9b, 0x9c, 0x06,
	0x09, 0x87, 0x11, 0x17, 0x6d, 0x5e, 0x92, 0x0d, 0x14, 0x5c, 0x7f, 0x26, 0xd6, 0x30, 0xfe, 0x5d,
	0xb2, 0x72, 0x8a, 0xf8, 0x96, 0xfe, 0x5e, 0x28, 0x90, 0x14, 0x02, 0xe4, 0x48, 0x82, 0x03, 0x75,
	0x8b, 0xff, 0x10, 0xe3, 0x7f, 0x9c, 0x39, 0x43, 0x7c, 0x9e, 0x90, 0x5f, 0x2a, 0x90, 0x72, 0xf4,
	0x23, 0x02, 0x8b, 0xb5, 0xaf, 0x5d, 0x91, 0xe9, 0xd6, 0xf4, 0xa4, 0xf7, 0x11, 0xd5, 0x0a, 0xbd,
	0x3d, 0x20, 0x2a, 0x71, 0x66, 0x72, 0x40, 0xaf, 0x14, 0x00, 0x9e, 0x60, 0x71, 0x5e, 0x06, 0x69,
	0xd5, 0xdb, 0xb3, 0xcb, 0xcc, 0xf6, 0xb0, 0xa1, 0x1f, 0x21, 0xa2, 0x0f, 0xc8, 0xe9, 0x10, 0x91,
	0xbf, 0x2a, 0x30, 0xce, 0xfd, 0x38, 0xda, 0x85, 0x06, 0x59, 0xe8, 0xb6, 0x29, 0x07, 0x83, 0xb6,
	0x8d, 0xd0, 0x7e, 0x40, 0xbe, 0x37, 0x20, 0x34, 0x79, 0x4b, 0xcf, 0x7f, 0xe6, 0xe8, 0x34, 0xda,
	0x80, 0x7f, 0xaf, 0xc0, 0x84, 0xaf, 0x73, 0x47, 0x16, 0xfd, 0x38, 0xba, 0xb5, 0xf7, 0x7a, 0x63,
	0x96, 0x09, 0xce, 0x9c, 0x29, 0xc1, 0x09, 0xab, 0xbf, 0x13, 0x74, 0xc8, 0x78, 0x7a, 0x3f, 0xdd,
	0xb5, 0xb6, 0x8e, 0x50, 0xee, 0x91, 0xbb, 0xa7, 0x82, 0x62, 0xed, 0x41, 0xbe, 0x01, 0xd6, 0x59,
	0x9d, 0x59, 0x1b, 0x20, 0x04, 0xa2, 0x69, 0x5f, 0x8b, 0xec, 0x61, 0xa3, 0x65, 0x1e, 0x59, 0x80,
	0x16, 0xcf, 0x06, 0xe8, 0xa5, 0x02, 0x29, 0x51, 0x14, 0x04, 0xa0, 0x6e, 0xeb, 0xef, 0x4e, 0xcc,
	0x06, 0xe2, 0x58, 0xcd, 0x9c, 0x09, 0x07, 0x4f, 0xd5, 0x17, 0x0a, 0x8c, 0x89, 0xdd, 0x6f, 0x7f,
	0xe4, 0x04, 0xdd, 0x47, 0x7c, 0x6d, 0xa3, 0x4c, 0xdf, 0xcf, 0x24, 0xeb, 0xb4, 0xa6, 0xd7, 0x7a,
	0x62, 0xac, 0x58, 0x93, 0xe4, 0xd9, 0x91, 0xec, 0xe0, 0xb8, 0xd6, 0x23, 0x84, 0x73, 0x07, 0x66,
	0xfb, 0xd8, 0xd1, 0x1c, 0x22, 0x59, 0x20, 0x21, 0x91, 0x90, 0x5f, 0x29, 0xd8, 0x9f, 0x74, 0x7c,
	0x55, 0x19, 0xa1, 0xc1, 0x5c, 0xee, 0xf9, 0x75, 0x86, 0x70, 0xc2, 0x5d, 0x63, 0x54, 0x67, 0xf4,
	0xdf, 0x2a, 0x78, 0xa7, 0xf0, 0xb4, 0xee, 0xae, 0xf7, 0xcb, 0x81, 0x05, 0xaa, 0x7f, 0xb2, 0x56,
	0x10, 0xd3, 0x2d, 0xb2, 0x1c, 0x8e, 0x22, 0xe7, 0x1d, 0x84, 0x7c, 0xad, 0xc0, 0xa4, 0x90, 0xb3,
	0x07, 0x5f, 0xdf, 0xb0, 0x21, 0x80, 0xc9, 0xe2, 0x9e, 0x39, 0x05, 0x30, 0xae, 0xa8, 0x43, 0x71,
	0xd4, 0xc8, 0xa6, 0x56, 0xc0, 0x51, 0xe3, 0xed, 0x92, 0x05, 0x5d, 0xc7, 0xc4, 0x6c, 0xfa, 0x2e,
	0x42, 0xb9, 0x4a, 0xde, 0xee, 0x9d, 0x37, 0x11, 0xea, 0xa5, 0x7d, 0xea, 0xe2, 0xec, 0xf3, 0xcc,
	0x95, 0x94, 0x33, 0x0d, 0x83, 0x43, 0x5e, 0x00, 0x78, 0x39, 0x3e, 0x77, 0x1c, 0x1f, 0x20, 0x8e,
	0x9b, 0x24, 0x1f, 0x02, 0x87, 0x4b, 0x30, 0xbf, 0xb0, 0x0b, 0xf2, 0x80, 0x98, 0xba, 0x95, 0x65,
	0x89, 0x64, 0x71, 0x60, 0x24, 0x5f, 0x2a, 0x90, 0xea, 0x9c, 0xfd, 0x46, 0x50, 0xe9, 0xf3, 0x35,
	0x02, 0x83, 0xae, 0xac, 0x72, 0xbe, 0x75, 0x79, 0x26, 0xff, 0x77, 0xba, 0xf3, 0x9e, 0x7c, 0xa5,
	0x40, 0xd2, 0xfe, 0x76, 0xe8, 0xf1, 0xcd, 0xd0, 0x3f, 0x39, 0x9b, 0x88, 0x64, 0x9d, 0xac, 0x9d,
	0xf6, 0xe6, 0xe1, 0x60, 0xe9, 0x95, 0x02, 0x17, 0x44, 0xbe, 0xfa, 0x02, 0xeb, 0x96, 0x21, 0x09,
	0x67, 0xf1, 0x3c, 0xe0, 0x7c, 0xa9, 0xc0, 0x05, 0xb1, 0xb5, 0xce, 0x81, 0xa7, 0x55, 0x04, 0xf6,
	0x21, 0x3d, 0x65, 0xc6, 0xf8, 0xfe, 0x6a, 0x88, 0x76, 0x88, 0xd5, 0x09, 0x33, 0xc8, 0xd5, 0x80,
	0xcf, 0x49, 0x7f, 0x9b, 0x2c, 0x73, 0xa9, 0xb7, 0x99, 0xbb, 0x21, 0x62, 0x37, 0xdd, 0x48, 0x1b,
	0x52, 0x8e, 0xa6, 0x50, 0xd0, 0x75, 0xde, 0xdf, 0x33, 0xca, 0x5c, 0x0d, 0xd5, 0x19, 0xa3, 0x33,
	0x18, 0xf2, 0x4d, 0x32, 0xc1, 0x43, 0x5a, 0x7f, 0xca, 0xe4, 0xf7, 0x5b, 0x35, 0x83, 0x14, 0x20,
	0x65, 0x2b, 0xf3, 0x71, 0x35, 0xe8, 0x12, 0xe5, 0x69, 0xf4, 0x06, 0xad, 0xcf, 0xd9, 0xdb, 0xa5,
	0x6f, 0x90, 0xc7, 0xd8, 0xdb, 0x91, 0x5d, 0xfd, 0xa0, 0xe3, 0xc2, 0xfd, 0xff, 0x40, 0x50, 0x07,
	0xc9, 0xf1, 0x97, 0x00, 0x7d, 0x63, 0xed, 0xea, 0x37, 0xaf, 0x2f, 0x29, 0x7f, 0x7f, 0x7d, 0x49,
	0xf9, 0xf7, 0xeb, 0x4b, 0xca, 0x27, 0x17, 0x0f, 0x96, 0x5d, 0x13, 0x64, 0x7e, 0x8f, 0x4a, 0x71,
	0x54, 0xe7, 0xfb, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x37, 0x07, 0x03, 0xd8, 0x13, 0x2c, 0x00,
	0x00,
}
